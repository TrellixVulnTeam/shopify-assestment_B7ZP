{"ast":null,"code":"/**\n * Set of fucntions to handle axios calls\n */\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\n\nfunction manageErrorConnection(err) {\n  if (err.response && err.response.status >= 400 && err.response.status <= 500) {\n    try {\n      if (err.response) {\n        if (err.response.status === 401 && !err.config.url.includes('signin') && !err.config.url.includes('signup')) {\n          AuthUtil.logout();\n        }\n\n        const {\n          data\n        } = err.response;\n        const error = data.errors ? `${data.errors[0].message} ${data.errors[0].cause ? data.errors[0].cause : ''}` : data.payload.message;\n        console.log('::::::::::', error);\n        toast(error);\n        return Promise.reject(new Error(error));\n      }\n    } catch (error) {\n      console.log(error);\n    } // this will trigger the `handleError` function in the promise chain\n\n  } else if (err.code === 'ECONNREFUSED') {\n    // this will trigger the `handlerResponse` function in the promise chain\n    // bacause we are not returning a rejection! Just an example\n    return 'nevermind';\n  } else {\n    // this will trigger the `handleError` function in the promise chain\n    return Promise.reject(err);\n  }\n}\n\nfunction handleResponse(response) {\n  console.log(`handleResponse: ${response}`);\n}\n\nfunction handleError(error) {\n  console.log(`handleError: ${error}`);\n}\n\nclass AxiosCalls {\n  constructor() {\n    this.client = axios.create({\n      baseURL: `${process.env.REACT_APP_API}`\n    }); // Add a request interceptor\n\n    this.client.interceptors.request.use(function (config) {\n      // Do something before request is sent\n      const token = localStorage.getItem('accessToken');\n      const refresh = localStorage.getItem('refreshToken');\n      config.headers.Authorization = `Bearer ${token}`;\n      config.headers[\"X-Refresh-Token\"] = `refresh ${refresh}`;\n      return config;\n    }, function (error) {\n      // Do something with request error\n      return Promise.reject(error);\n    });\n    this.client.interceptors.response.use(function (config) {\n      try {\n        console.log({\n          status: config.status\n        });\n        const refreshToken = config.headers['x-refresh-token'];\n        const accessToken = config.headers['x-access-token'];\n\n        if (refreshToken && refreshToken) {\n          AuthUtil.registerUser({\n            accessToken,\n            refreshToken\n          });\n        }\n\n        return config;\n      } catch (error) {\n        console.log({\n          mmm: error\n        });\n        return config;\n      }\n    }, manageErrorConnection);\n  }\n  /**\n   * @description Axios get request\n   * @param {*} url url for request\n   * @returns  axios promisr\n   */\n\n\n  get(url) {\n    return this.client.get(url);\n  }\n  /**\n   * @description axios post request\n   * @param {*} url  for requst\n   * @param {*} data to post\n   * @returns \n   */\n\n\n  post(url, data) {\n    return this.client.post(url, data);\n  }\n  /**\n   * @description deltet axios requestt\n   * @param {*} url url for request\n   * @returns \n   */\n\n\n  delete(url) {\n    return this.client.delete(url);\n  }\n  /**\n   * \n   * @param {*} url url for request\n   * @param {*} data data to pass\n   * @returns \n   */\n\n\n  update(url) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this.client.put(url, data);\n  }\n  /**\n   * @description this function extract the error response message from the data\n   * @param {ErrorObject} error \n   */\n\n\n  extractErrorMessage(error) {\n    console.log({\n      error: error\n    });\n    const {\n      data\n    } = error.response;\n    return `${data.errors[0].message} ${data.errors[0].cause ? data.errors[0].cause : ''}`;\n  }\n\n}\n\nconst axiosCall = new AxiosCalls();\nexport default axiosCall;","map":{"version":3,"sources":["/Users/somto/Desktop/personal/studio/src/utils/axios.js"],"names":["axios","toast","manageErrorConnection","err","response","status","config","url","includes","AuthUtil","logout","data","error","errors","message","cause","payload","console","log","Promise","reject","Error","code","handleResponse","handleError","AxiosCalls","constructor","client","create","baseURL","process","env","REACT_APP_API","interceptors","request","use","token","localStorage","getItem","refresh","headers","Authorization","refreshToken","accessToken","registerUser","mmm","get","post","delete","update","put","extractErrorMessage","axiosCall"],"mappings":"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","sourcesContent":["/**\n * Set of fucntions to handle axios calls\n */\n\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\n\n\nfunction manageErrorConnection(err) {\n    if (err.response && err.response.status >= 400 && err.response.status <= 500) {\n       try {\n        if (   err.response){\n           \n            if (err.response.status === 401 &&\n                  ( \n                      !err.config.url.includes('signin') &&\n                      !err.config.url.includes('signup') ) \n                )  {\n\n                 AuthUtil.logout()\n            }\n    \n            const { data } = err.response;\n            const error = data.errors ? `${data.errors[0].message} ${data.errors[0].cause ? data.errors[0].cause : ''}` : data.payload.message\n            console.log('::::::::::',error)\n            toast(error)\n            return Promise.reject(new Error(error))\n    \n       \n         \n        }\n    } catch (error) {\n        console.log(error)\n    }\n        // this will trigger the `handleError` function in the promise chain\n      } else if (err.code === 'ECONNREFUSED') {\n        // this will trigger the `handlerResponse` function in the promise chain\n        // bacause we are not returning a rejection! Just an example\n        return 'nevermind'\n    } else {\n        // this will trigger the `handleError` function in the promise chain\n        return Promise.reject(err)\n    }\n}\n\nfunction handleResponse(response) {\n    console.log(`handleResponse: ${response}`);\n}\n\nfunction handleError(error) {\n    console.log(`handleError: ${error}`);\n}\n\nclass AxiosCalls {\n    constructor() {\n        this.client = axios.create({\n            baseURL: `${process.env.REACT_APP_API}`\n        });\n\n\n\n        // Add a request interceptor\n        this.client.interceptors.request.use(function (config) {\n            // Do something before request is sent\n            const token = localStorage.getItem('accessToken')\n            const refresh = localStorage.getItem('refreshToken')\n            config.headers.Authorization = `Bearer ${token}`;\n            config.headers[\"X-Refresh-Token\"] = `refresh ${refresh}`;\n            return config;\n        }, function (error) {\n            // Do something with request error\n            return Promise.reject(error);\n        });\n\n\n        this.client.interceptors.response.use(function (config) {\n            try {\n                console.log({ status: config.status })\n                const refreshToken = config.headers['x-refresh-token'];\n                const accessToken = config.headers['x-access-token'];\n                if (refreshToken && refreshToken) {\n\n                    AuthUtil.registerUser({ accessToken, refreshToken })\n                }\n\n                return config;\n            } catch (error) {\n                console.log({ mmm: error })\n                return config;\n            }\n\n        }\n        , manageErrorConnection\n        )\n\n    }\n\n    /**\n     * @description Axios get request\n     * @param {*} url url for request\n     * @returns  axios promisr\n     */\n    get(url) {\n        return this.client.get(url)\n    }\n\n    /**\n     * @description axios post request\n     * @param {*} url  for requst\n     * @param {*} data to post\n     * @returns \n     */\n    post(url, data) {\n        return this.client.post(url, data)\n    }\n\n    /**\n     * @description deltet axios requestt\n     * @param {*} url url for request\n     * @returns \n     */\n    delete(url) {\n        return this.client.delete(url)\n    }\n\n    /**\n     * \n     * @param {*} url url for request\n     * @param {*} data data to pass\n     * @returns \n     */\n    update(url, data = {}) {\n        return this.client.put(url, data)\n    }\n\n\n    /**\n     * @description this function extract the error response message from the data\n     * @param {ErrorObject} error \n     */\n    extractErrorMessage(error) {\n        console.log({ error: error })\n\n        const { data } = error.response;\n        return `${data.errors[0].message} ${data.errors[0].cause ? data.errors[0].cause : ''}`\n    }\n\n\n}\n\n\nconst axiosCall = new AxiosCalls()\n\n\nexport default axiosCall"]},"metadata":{},"sourceType":"module"}